---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: apigateway
  name: apigateway
spec:
  type: NodePort # Aggiunta della definizione del tipo del servizio
  ports:
    - name: "http"
      port: 9000
      targetPort: 9000
      nodePort: 30000 # Porta aperta sulla macchina host
  selector:
    io.kompose.service: apigateway
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: apigateway
  name: apigateway
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: apigateway
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/apigateway-gateway: "true"
        io.kompose.service: apigateway
    spec:
      containers:
        - image: giargiapower/helpmeandyou:apigateway
          name: apigateway
          ports:
            - containerPort: 9000
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: apigateway-gateway
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/apigateway-gateway: "true"
  podSelector:
    matchLabels:
      io.kompose.network/apigateway-gateway: "true"

---

apiVersion: v1
kind: Service
metadata:
  name: eureka-server
spec:
  ports:
    - name: "8761"
      port: 8761
      targetPort: 8761
  selector:
    io.kompose.service: app
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eureka-server
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: app
  template:
    metadata:
      labels:
        io.kompose.network/eurekaserver-gateway: "true"
        io.kompose.service: app
    spec:
      containers:
        - image: giargiapower/helpmeandyou:eurekaserver
          name: eureka
          ports:
            - containerPort: 8761
          resources: {}
      restartPolicy: Always

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: eurekaserver-gateway
spec:
  podSelector:
    matchLabels:
      io.kompose.network/eurekaserver-gateway: "true"
  ingress:
    - {}

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  ports:
    - name: "5672"
      port: 5672
      targetPort: 5672
    - name: "15672"
      port: 15672
      targetPort: 15672
  selector:
    io.kompose.service: app
  type: NodePort
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: app
  template:
    metadata:
      labels:
        io.kompose.network/rabbitmq-gateway: "true"
        io.kompose.service: app
    spec:
      containers:
        - image: giargiapower/rabbitmq:latest
          name: rabbitmq
          ports:
            - containerPort: 5672
            - containerPort: 15672
          resources: {}
      restartPolicy: Always

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rabbitmq-gateway
spec:
  podSelector:
    matchLabels:
      io.kompose.network/rabbitmq-gateway: "true"
  ingress:
    - {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: gestorec
  name: gestorec
spec:
  ports:
    - name: "8085"
      port: 8085
      targetPort: 8085
  selector:
    io.kompose.service: gestorec
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlgestcred
  name: dbpostgresqlgestcred
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: dbpostgresqlgestcred
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: gestorec
  name: gestorec
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: gestorec
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/gestorecredenziali-gestore-credenziali: "true"
        io.kompose.service: gestorec
    spec:
      containers:
        - env:
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://dbpostgresqlgestcred:5432/postgres
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: update
          image: giargiapower/helpmeandyou:gestorecredenziali
          name: gestorecredenziali
          ports:
            - containerPort: 8085
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: gestorecredenziali-gestore-credenziali
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/gestorecredenziali-gestore-credenziali: "true"
  podSelector:
    matchLabels:
      io.kompose.network/gestorecredenziali-gestore-credenziali: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlgestcred
  name: dbpostgresqlgestcred
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: dbpostgresqlgestcred
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/gestorecredenziali-gestore-credenziali: "true"
        io.kompose.service: dbpostgresqlgestcred
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: restart
              value: unless-stopped
          image: postgres
          name: postgres
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
      restartPolicy: Always
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: db-data
  name: db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: magazzino
  name: magazzino
spec:
  ports:
    - name: "8087"
      port: 8087
      targetPort: 8087
  selector:
    io.kompose.service: magazzino
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlmagazzino
  name: dbpostgresqlmagazzino
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: dbpostgresqlmagazzino
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: magazzino
  name: magazzino
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: magazzino
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/magazzino-magazzino: "true"
        io.kompose.service: magazzino
    spec:
      containers:
        - env:
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://dbpostgresqlmagazzino:5432/postgres
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: update
          image: giargiapower/helpmeandyou:magazzino
          name: magazzino
          ports:
            - containerPort: 8087
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: magazzino-magazzino
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/magazzino-magazzino: "true"
  podSelector:
    matchLabels:
      io.kompose.network/magazzino-magazzino: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlmagazzino
  name: dbpostgresdbpostgresqlmagazzinoql
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: dbpostgresqlmagazzino
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/magazzino-magazzino: "true"
        io.kompose.service: dbpostgresqlmagazzino
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: restart
              value: unless-stopped
          image: postgres
          name: postgres-mag
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
      restartPolicy: Always
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: db-data
  name: db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: richieste
  name: richieste
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: richieste
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlrequest
  name: dbpostgresqlrequest
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: dbpostgresqlrequest
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: richieste
  name: richieste
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: richieste
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/requestshelp-richieste-aiuto: "true"
        io.kompose.service: richieste
    spec:
      containers:
        - env:
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://dbpostgresqlrequest:5432/postgres
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: update
          image: giargiapower/helpmeandyou:requestshelp
          name: richieste-aiuto
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: requestshelp-richieste-aiuto
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/requestshelp-richieste-aiuto: "true"
  podSelector:
    matchLabels:
      io.kompose.network/requestshelp-richieste-aiuto: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlrequest
  name: dbpostgresqlrequest
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: dbpostgresqlrequest
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/requestshelp-richieste-aiuto: "true"
        io.kompose.service: dbpostgresqlrequest
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: restart
              value: unless-stopped
          image: postgres
          name: postgres-req
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
      restartPolicy: Always
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: db-data
  name: db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: segnalazioni
  name: segnalazioni
spec:
  ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
  selector:
    io.kompose.service: segnalazioni
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlsegnalazioni
  name: dbpostgresqlsegnalazioni
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: dbpostgresqlsegnalazioni
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: segnalazioni
  name: segnalazioni
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: segnalazioni
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/segnalazioni-1-segnalazioni: "true"
        io.kompose.service: segnalazioni
    spec:
      containers:
        - env:
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://dbpostgresqlsegnalazioni:5432/postgres
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: update
          image: giargiapower/helpmeandyou:segnalazioni_1
          name: segnalazioni
          ports:
            - containerPort: 8082
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: segnalazioni-1-segnalazioni
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/segnalazioni-1-segnalazioni: "true"
  podSelector:
    matchLabels:
      io.kompose.network/segnalazioni-1-segnalazioni: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: dbpostgresqlsegnalazioni
  name: dbpostgresqlsegnalazioni
spec:
  replicas : 1
  selector:
    matchLabels:
      io.kompose.service: dbpostgresqlsegnalazioni
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml --out kubernetes-manifests.yaml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/segnalazioni-1-segnalazioni: "true"
        io.kompose.service: dbpostgresqlsegnalazioni
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: restart
              value: unless-stopped
          image: postgres
          name: postgres-s
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
      restartPolicy: Always
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: db-data
  name: db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

