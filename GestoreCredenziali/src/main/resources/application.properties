server.port=8085
rabbitmq.host=rabbitmq
rabbitmq.virtualhost=/
rabbitmq.port=5672
rabbitmq.username=guest
rabbitmq.password=guest
rabbitmq.exchange=rabbitmq.exchange
rabbitmq.queue=rabbitmq.queue
rabbitmq.routingkey=rabbitmq.routingkey
rabbitmq.reply.timeout=60000
rabbitmq.concurrent.consumers=1
rabbitmq.max.concurrent.consumers=2



spring.application.name=gestore-credenziali
eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=/


spring.datasource.url = jdbc:postgresql://localhost:5432/postgres

spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.username = postgres
spring.datasource.password = postgres

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.open-in-view = false

# Because detection is disabled you have to set correct dialect by hand.
spring.jpa.database-platform = org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.hibernate.ddl-auto = update


## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB


## Spring Security for Google Login
spring.security.oauth2.client.registration.google.client-id=944204629673-grd6fhq4g1ehpmmkjpvl3rgn04gntoe8.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email
